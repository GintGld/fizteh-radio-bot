import os
import tempfile
import random
from datetime import (date, datetime, timedelta)

import telebot
from dotenv import load_dotenv

from client import client

TMP_DIR = 'tmp'
LOG_DIR = '.log'
SCHEDULE_STEP = 10

cl = client()

load_dotenv()
app = telebot.TeleBot(token=os.environ.get('TOKEN'))

login_candidates = {}
new_media_candidates = {}
status = {}
search_res = {}
schedule_cut = {}

LIBRARY = 'üìöüé∂'
NEW_MEDIA = 'üÜïüéµ'
SCHEDULE = 'üóìüéº'
HELP_MESSAGE = '—Ö–µ–ª–ø...'
MAIN_MENU = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'

@app.message_handler(commands=['start'])
def start(msg: telebot.types.Message) -> None:
    user_id = msg.from_user.id
    if cl.is_user_known(user_id):
        status[user_id] = 'logged'
        app.send_message(
            chat_id=user_id,
            text=f'–ö–∞—Å—Ç—É–π –∏–ª–∏ –ø–∏–∑–¥—É–π, {cl.get_user_name(user_id)}.',
            reply_markup=main_menu()
        )
    else:
        sended_msg = app.send_message(
            chat_id=user_id,
            text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Ä–∞–¥–∏—Å—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n' + \
                '–í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω.',
        )
        login_candidates[user_id] = {
            'login' : None,
            'pass' : None,
            'messages' : [msg.message_id, sended_msg.message_id]
        }
        status[user_id] = 'candidate'
        
@app.message_handler(regexp=MAIN_MENU)
def main_menu_handler(msg: telebot.types.Message) -> None:
    user_id = msg.from_user.id
    app.send_message(
        chat_id=user_id,
        text='–ö–∞—Å—Ç—É–π –∏–ª–∏ –ø–∏–∑–¥—É–π',
        reply_markup=main_menu()
    )

@app.message_handler(regexp=LIBRARY)
def library(msg: telebot.types.Message) -> None:
    user_id = msg.from_user.id

    if invalid_user(user_id):
        return

    try:
        cl.update_library(user_id)
    except Exception as e:
        log(user_id, 'failed to update library. %s' % e)
        fail_message(user_id)
        return
    
    try:
        cl.update_schedule(user_id)
    except Exception as e:
        log(user_id, 'failed to update schedule. %s' % e)
        fail_message(user_id)
        return
    
    status[user_id] = 'library-search'
    app.send_message(
        chat_id=user_id,
        text='–ù–∞–ø–∏—à–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞.',
        reply_markup=to_main_menu()
    )

@app.message_handler(regexp=SCHEDULE)
def schedule(msg: telebot.types.Message) -> None:
    user_id = msg.from_user.id

    if invalid_user(user_id):
        return

    try:
        cl.update_library(user_id)
    except Exception as e:
        log(user_id, 'failed to update library. %s' % e)
        fail_message(user_id)

    try:
        cl.update_schedule(user_id)
    except Exception as e:
        log(user_id, 'failed to update schedule. %s' % e)
        fail_message(user_id)

    schedule_cut[user_id] = get_actual_schedule()

    markup = telebot.types.InlineKeyboardMarkup(row_width=1).add(
        telebot.types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="0_schedule"),
        telebot.types.InlineKeyboardButton("–ê–≤—Ç–æ–¥–∏–¥–∂–µ–π", callback_data="autodj")
    )

    app.send_message(
        chat_id=user_id,
        text='–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –∏–ª–∏ –∞–≤—Ç–æ –¥–∏–¥–∂–µ—è',
        reply_markup=markup
    )

@app.message_handler(regexp=NEW_MEDIA)
def new_media(msg: telebot.types.Message) -> None:
    user_id = msg.from_user.id
    if invalid_user(user_id):
        return

    app.send_message(
        chat_id=user_id,
        text='–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ? –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .mp3 (–Ω–µ –±–æ–ª–µ–µ 20 –ú–ë)',
    )
    status[msg.from_user.id] = 'new-media-upload-file'

@app.message_handler(regexp=HELP_MESSAGE)
def help_message(msg: telebot.types.Message) -> None:
    app.send_message(
        chat_id=msg.from_user.id,
        text='–°–µ–π—á–∞—Å —è –æ–±—ä—è—Å–Ω—é —Å–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!',
        reply_markup=main_menu()
    )

@app.callback_query_handler(lambda call: call.data.endswith('_schedule'))
def schedule_list(call: telebot.types.CallbackQuery) -> None:
    user_id = call.from_user.id

    if invalid_user(user_id):
        return

    data = call.data.removesuffix('_schedule')

    if data == 'main':
        schedule_cut[user_id] = get_actual_schedule()
        markup = telebot.types.InlineKeyboardMarkup(row_width=1).add(
            telebot.types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="0_schedule"),
            telebot.types.InlineKeyboardButton("–ê–≤—Ç–æ–¥–∏–¥–∂–µ–π", callback_data="autodj")
        )
        app.send_message(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –∏–ª–∏ –∞–≤—Ç–æ –¥–∏–¥–∂–µ—è',
            reply_markup=markup
        )
        return

    i = int(data)

    result = [segment_pretty(x) for x in schedule_cut[user_id][i*SCHEDULE_STEP:(i+1)*SCHEDULE_STEP]]

    text = "\n".join(result) if len(result) != 0 else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ."

    app.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=arrows_menu(i, len(result) == 0)
    )

@app.callback_query_handler(lambda call: call.data == 'autodj')
def autodj_handler(call: telebot.types.CallbackQuery) -> None:
    user_id = call.from_user.id

    if len(cl.library) == 0:
        app.send_message(
            chat_id=user_id,
            text='–£–ø—Å, –∞ —É –º–µ–Ω—è –Ω–∏—á–µ–≥–æ—à–µ–Ω—å–∫–∏ –Ω–µ—Ç, —á—Ç–æ–±—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∏—Ç—å...'
        )
        return

    status[user_id] = 'autodj-hours'

    app.send_message(
        chat_id=user_id,
        text='–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–±–∏—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏?'
    )

@app.callback_query_handler(lambda call: call.data == 'new-segment')
def new_segment_ask_id(call: telebot.types.CallbackQuery) -> None:
    user_id = call.from_user.id

    status[user_id] = 'new-segment-id'

    app.send_message(
        chat_id=user_id,
        text='–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å.'
    )

@app.callback_query_handler(lambda call: call.data == 'new-media-send')
def new_media_send(call: telebot.types.CallbackQuery) -> None:
    user_id = call.from_user.id

    if invalid_user(user_id):
        return    

    status[user_id] = None

    sended_msg = app.edit_message_text(
        chat_id=user_id,
        message_id=call.message.id,
        text='–û—Ç–ø—Ä–∞–≤–ª—è—é...'
    )

    try:
        cl.upload_media(
            user_id, 
            new_media_candidates[user_id]['name'],
            new_media_candidates[user_id]['author'],
            new_media_candidates[user_id]['source']
        )
    except Exception as e:
        log(user_id, 'failed to upload media. %s' %e)
        fail_message(user_id)
        return

    try:
        cl.update_library(user_id)
    except Exception as e:
        log(user_id, 'failed to update library. %s' % e)
        fail_message(user_id)
        return

    try:
        os.remove(new_media_candidates[user_id]['source'])
    except Exception as e:
        log(user_id, 'failef to delete tmp file. %s' % e)
    finally:
        del new_media_candidates[user_id]

    app.edit_message_text(
        chat_id=user_id,
        message_id=sended_msg.message_id,
        text='–ó–∞–≥—Ä—É–∂–µ–Ω–æ!',
        # reply_markup=main_menu()
    )

@app.callback_query_handler(lambda call: call.data == 'new-media-name')
def new_media_name(call: telebot.types.CallbackQuery) -> None:
    user_id = call.from_user.id

    if invalid_user(user_id):
        return
    
    status[user_id] = 'new-media-name'
    new_media_candidates[user_id]['name'] = None
    new_media_candidates[user_id]['author'] = None

    app.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text="–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
    )

@app.message_handler(content_types=['text'])
def text_message_handler(msg: telebot.types.Message) -> None:    
    user_id = msg.from_user.id

    if status[user_id] == 'candidate':
        authorization(msg)
        return

    if invalid_user(user_id):
        return
    
    match status[user_id]:
        case 'library-search':
            library_search(msg)
        case 'new-media-name':
            new_media_name(msg)
        case 'new-media-author':
            new_media_author(msg)
        case 'new-segment-id':
            new_segment_id(msg)
        case 'autodj-hours':
            autodj_hours(msg)

@app.message_handler(content_types=['audio'])
def upload_media(msg: telebot.types.Message) -> None:
    user_id = msg.from_user.id
    audio = msg.audio

    if invalid_user(user_id):
        return    

    if status[user_id] != 'new-media-upload-file':
        app.send_message(
            chat_id=user_id,
            text='–ù–µ –æ–∂–∏–¥–∞–ª –æ—Ç —Ç–µ–±—è —Ç–∞–∫–æ–≥–æ...'
        )
        return

    if audio.mime_type != "audio/mpeg":
        app.send_message(
            chat_id=user_id,
            text='–Ø –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ .mp3 —Ñ–∞–π–ª.'
        )
        return

    sended_msg = app.send_message(
        chat_id=user_id,
        text="–ö–∞—á–∞—é..."
    )

    file_info = app.get_file(audio.file_id)
    downloaded_file = app.download_file(file_info.file_path)

    _, filename = tempfile.mkstemp(dir=TMP_DIR, prefix='audio-')

    with open(filename, 'wb') as new_file:
        new_file.write(downloaded_file)

    new_media_candidates[user_id] = {
        'name' : None,
        'author' : None,
        'source' : filename,
    }

    if msg.audio.file_name.count(' - ') == 1:
        author, name = msg.audio.file_name.split(' - ')
        name = name.removesuffix('.mp3')
        new_media_candidates[user_id]['name'] = name
        new_media_candidates[user_id]['author'] = author
        status[user_id] = None
        app.edit_message_text(
            chat_id=user_id,
            message_id=sended_msg.message_id,
            text=f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ \"{name}\", –∞ –∞–≤—Ç–æ—Ä - \"{author}\"?"
        )
        app.edit_message_reply_markup(
            chat_id=user_id,
            message_id=sended_msg.message_id,
            reply_markup=telebot.types.InlineKeyboardMarkup(row_width=2).add(
                telebot.types.InlineKeyboardButton(text='–î–∞', callback_data='new-media-send'),
                telebot.types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='new-media-name')
            )
        )
        return

    app.edit_message_text(
        chat_id=user_id,
        message_id=sended_msg.message_id,
        text="–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
    )
    status[user_id] = 'new-media-name'

def main_menu() -> telebot.types.ReplyKeyboardMarkup:
    return telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(
        telebot.types.KeyboardButton(LIBRARY),
        telebot.types.KeyboardButton(SCHEDULE),
        telebot.types.KeyboardButton(NEW_MEDIA),
        telebot.types.KeyboardButton(HELP_MESSAGE),
    )

def to_main_menu() -> telebot.types.ReplyKeyboardMarkup:
    return telebot.types.ReplyKeyboardMarkup(resize_keyboard=True).add(
        telebot.types.KeyboardButton(MAIN_MENU),
    )

def arrows_menu(i: int, empty: bool) -> telebot.types.InlineKeyboardMarkup:
    if i > 0:
        if empty:
            return telebot.types.InlineKeyboardMarkup(row_width=1).add(
                telebot.types.InlineKeyboardButton(text='üîô', callback_data=f'{i-1}_schedule'),
                telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'main_schedule')
            )
        return telebot.types.InlineKeyboardMarkup(row_width=2).add(
            telebot.types.InlineKeyboardButton(text='üîô', callback_data=f'{i-1}_schedule'),
            telebot.types.InlineKeyboardButton(text='üîú', callback_data=f'{i+1}_schedule'),
            telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'main_schedule')
        )
    else:
        if empty:
            return telebot.types.InlineKeyboardMarkup(row_width=1).add(
                telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'main_schedule')
            )
        return telebot.types.InlineKeyboardMarkup(row_width=1).add(
            telebot.types.InlineKeyboardButton(text='üîú', callback_data=f'{i+1}_schedule'),
            telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'main_schedule')
        )

def authorization(msg: telebot.types.Message) -> None:
    user_id = msg.from_user.id
    if cl.is_user_known(user_id):
        return

    if login_candidates[user_id]['login'] is None:
        login = msg.text
        if login is None or login == '':
            app.send_message(
                chat_id=user_id,
                text='–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            )
            return
        
        login_candidates[user_id]['login'] = login
        sended_msg = app.send_message(
            chat_id=user_id,
            text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å'
        )
        login_candidates[user_id]['messages'].append(msg.message_id)
        login_candidates[user_id]['messages'].append(sended_msg.message_id)
        return
    elif login_candidates[user_id]['pass'] is None:
        password = msg.text
        if password is None or password == '':
            app.send_message(
                chat_id=user_id,
                text='–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            )
            return
        
        login_candidates[user_id]['pass'] = password
        login_candidates[user_id]['messages'].append(msg.message_id)
        app.delete_messages(user_id, login_candidates[user_id]['messages'])
        
        try:
            res = cl.login(
                user_id,
                login_candidates[user_id]['login'],
                login_candidates[user_id]['pass']    
            )
        except Exception as e:
            log(user_id, 'Error occured during client->login. %s' % e)
            fail_message(user_id)

        if res:
            del login_candidates[user_id]
            status[user_id] = None
            app.send_message(
                chat_id=user_id,
                text=f'–ü—Ä–∏–≤–µ—Ç, {cl.get_user_name(user_id)}! –ù–∞—á–Ω–µ–º?',
                reply_markup=main_menu()
            )
        else:
            login_candidates[user_id] = login_candidates[user_id] = {
                'login' : None,
                'pass' : None,
                'messages' : [msg.message_id]
            }
            app.send_message(
                chat_id=user_id,
                text='–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.'
            )
        return
    else:
        fail_message(user_id)

def new_media_name(msg: telebot.types.Message) -> None:
    user_id = msg.from_user.id
    name = msg.text

    if name is None or name == '':
        app.send_message(
            chat_id=user_id,
            text='–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
        )
    if new_media_candidates[user_id]['name'] is not None:
        fail_message(user_id)
        return

    new_media_candidates[user_id]['name'] = name
    status[user_id] = 'new-media-author'

    app.send_message(
        chat_id=user_id,
        text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–∑–æ–≤–∏ –∞–≤—Ç–æ—Ä–∞.'
    )

def new_media_author(msg: telebot.types.Message) -> None:
    user_id = msg.from_user.id
    author = msg.text

    if author is None or author == '':
        app.send_message(
            chat_id=user_id,
            text='–ò–º—è –∞–≤—Ç–æ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
        )
    if new_media_candidates[user_id]['author'] is not None:
        fail_message(user_id)

    new_media_candidates[user_id]['author'] = author
    status[user_id] = None

    sended_msg = app.send_message(
        chat_id=user_id,
        text='–û—Ç–ø—Ä–∞–≤–ª—è—é...'
    )

    try:
        cl.upload_media(
            user_id, 
            new_media_candidates[user_id]['name'],
            new_media_candidates[user_id]['author'],
            new_media_candidates[user_id]['source']
        )
    except Exception as e:
        log(user_id, 'failed to upload media. %s' %e)
        fail_message(user_id)
        return

    try:
        cl.update_library(user_id)
    except Exception as e:
        log(user_id, 'failed to update library. %s' % e)
        fail_message(user_id)
        return

    try:
        os.remove(new_media_candidates[user_id]['source'])
    except Exception as e:
        log(user_id, 'failef to delete tmp file. %s' % e)
    finally:
        del new_media_candidates[user_id]

    app.edit_message_text(
        chat_id=user_id,
        message_id=sended_msg.message_id,
        text='–ó–∞–≥—Ä—É–∂–µ–Ω–æ!',
        # reply_markup=main_menu()
    )

def new_segment_id(msg: telebot.types.Message) -> None:
    user_id = msg.from_user.id

    try:
        array_id = int(msg.text)
    except Exception as e:
        app.send_message(
            chat_id=user_id,
            text='–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –º–Ω–µ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ...'
        )
        return
    
    if not ( 1 <= array_id <= len(search_res[user_id]) ):
        app.send_message(
            chat_id=user_id,
            text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.'
        )
        return

    try:
        res = cl.new_segment(user_id, search_res[user_id][array_id - 1]['id'])
        segm_id = res.id
    except Exception as e:
        log(user_id, 'failed to create new segment. %s' %e)
        fail_message(user_id)
        return
    
    status[user_id] = 'library-search'

    try:
        cl.update_schedule(user_id)
    except Exception as e:
        log(user_id, 'failed to update schedule. %s' %e)
        fail_message(user_id)
        return

    app.send_message(
        chat_id=user_id,
        text=f'–î–æ–±–∞–≤–ª–µ–Ω–æ {segment_pretty(cl.get_segment(segm_id))}\n' +\
            '–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ.'
    )

def library_search(msg: telebot.types.Message) -> None:
    user_id = msg.from_user.id
    pattern = msg.text
    if pattern is None or pattern == '':
        app.send_message(
            chat_id=user_id,
            text='–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
        )
        return
    filtered = filter(
        lambda x: search_alg(pattern, x['name']) or search_alg(pattern, x['author']),
        cl.library    
    )
    search_res[user_id] = list(filtered)
    result = [f'{i+1}) {media_pretty(x)}' for i, x in enumerate(search_res[user_id])]

    text = "\n".join(result) if len(result) != 0 else '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.'

    markup = telebot.types.InlineKeyboardMarkup().add(
        telebot.types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='new-segment')
    ) if len(result) != 0 else None

    app.send_message(
        chat_id=user_id,
        text=text,
        reply_markup=markup
    )

def autodj_hours(msg: telebot.types.Message) -> None:
    user_id = msg.from_user.id

    try:
        hours = float(msg.text)
    except Exception as e:
        app.send_message(
            chat_id=user_id,
            text='–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –º–Ω–µ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ...'
        )
        return
    
    if hours < 0:
        app.send_message(
            chat_id=user_id,
            text='–¢—ã –∫—É–¥–∞ –≤ –º–∏–Ω—É—Å–∞ –ø–æ–ª–µ–∑...'
        )
        return
    if hours == 0:
        app.send_message(
            chat_id=user_id,
            text='–ù—É, –Ω–æ–ª—å —Ç–∞–∫ –Ω–æ–ª—å. –î–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥—É.'
        )
        return
    if hours > 24*3:
        app.send_message(
            chat_id=user_id,
            text='–ë–æ–ª—å—à–µ —Ç—Ä–µ—Ö –¥–Ω–µ–π –∑–∞ —Ä–∞–∑, —Å–∏–ª–µ–Ω –∫–æ–Ω–µ—á–Ω–æ. –î–∞–≤–∞–π –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—Ö–æ–¥–æ–≤.'
        )
        return

    sended_msg = app.send_message(
        chat_id=user_id,
        text='–†–∞–±–æ—Ç–∞–µ–º, —Ä–∞–¥–∏—Å—Ç—ã...'
    )

    media_to_send = []
    duration_sum = timedelta(0)

    indices = list(range(len(cl.library)))
    random.shuffle(indices)
    while duration_sum < timedelta(hours=hours):
        media_id = indices.pop()
        if len(indices) == 0:
            indices = list(range(len(cl.library)))
            random.shuffle(indices)
        media_to_send.append(media_id)

        duration = cl.lirary[media_id]['duration']
        duration_sum += timedelta(microseconds=duration*1e-3)

    for m in media_to_send:
        try:
            cl.new_segment(user_id, m)
        except Exception as e:
            log(user_id, f'failed to create new segment id={m} %s' %e)
            fail_message(user_id)
            return

    try:
        cl.update_schedule(user_id)
    except Exception as e:
        log(user_id, f'failed to update schedule %s' %e)
        fail_message(user_id)
        return

    app.delete_message(user_id, sended_msg.message_id)
    app.send_message(
        chat_id=user_id,
        text=f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–±–∏—Ç–æ –¥–æ {cl.time_horizon.strftime(r"%Y-%m-%d %H:%M:%S")}'
    )

    status[user_id] = 'library-search'

def search_alg(pattern: str, text: str) -> bool:
    return pattern.lower() in text.lower()

def get_actual_schedule() -> list[dict]:
    start = datetime.today()
    sch = []

    for segm in cl.schedule:
        segm_start = datetime.strptime(segm['start'], r'%Y-%m-%dT%H:%M:%S.%fZ') + timedelta(hours=3)
        segm_stop = segm_start + timedelta(microseconds=segm['stopCut']*1e-3)
        if start < segm_stop:
            sch.append(segm)
    return sch

def media_pretty(media: dict) -> str:
    return f'{media["name"]} \u2014 {media["author"]}'

def segment_pretty(segm: dict) -> str:
    segm_start = datetime.strptime(segm['start'], r'%Y-%m-%dT%H:%M:%S.%fZ') + timedelta(hours=3)
    segm_stop = segm_start + timedelta(microseconds=segm['stopCut']*1e-3)

    media = cl.get_media(segm['mediaID'])

    time_diap = segm_start.strftime('%H:%M:%S') + '-' + segm_stop.strftime('%H:%M:%S')
    return time_diap + '  ' + media_pretty(media)

def invalid_user(user_id: int) -> bool:
    if not cl.is_user_known(user_id):
        app.send_message(
            chat_id=user_id,
            text='–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é, —Ä–∞–∑–±–æ–π–Ω–∏–∫!'
        )
        return True
    if user_id not in status.keys():
        status[user_id] = None
    return False

def fail_message(user_id: int) -> None:
    app.send_message(
        chat_id=user_id,
        text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ç—ã–∫–∞–π—Ç–µ –∞–¥–º–∏–Ω–∞.'
    )

def log(user_id: int, *args) -> None:
    now = datetime.now()
    args = now.strftime(f'[%Y-%m-%d %H:%M:%S, {user_id}] ') + ... + args
    with open(LOG_DIR+'/bot.log', 'a') as wr:
        print(*args, file=wr)

if __name__ == '__main__':
    app.polling(non_stop=True)