# coding: utf-8

"""
    Phystech Radio - OpenAPI 3.0

    This is a Phystech Radio specification.  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Segment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'media_id': 'int',
        'start': 'int',
        'begin_cut': 'int',
        'stop_cut': 'int'
    }

    attribute_map = {
        'id': 'id',
        'media_id': 'mediaID',
        'start': 'start',
        'begin_cut': 'beginCut',
        'stop_cut': 'stopCut'
    }

    def __init__(self, id=None, media_id=None, start=None, begin_cut=None, stop_cut=None):  # noqa: E501
        """Segment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._media_id = None
        self._start = None
        self._begin_cut = None
        self._stop_cut = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if media_id is not None:
            self.media_id = media_id
        if start is not None:
            self.start = start
        if begin_cut is not None:
            self.begin_cut = begin_cut
        if stop_cut is not None:
            self.stop_cut = stop_cut

    @property
    def id(self):
        """Gets the id of this Segment.  # noqa: E501


        :return: The id of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Segment.


        :param id: The id of this Segment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def media_id(self):
        """Gets the media_id of this Segment.  # noqa: E501

        ID of corresponding media  # noqa: E501

        :return: The media_id of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this Segment.

        ID of corresponding media  # noqa: E501

        :param media_id: The media_id of this Segment.  # noqa: E501
        :type: int
        """

        self._media_id = media_id

    @property
    def start(self):
        """Gets the start of this Segment.  # noqa: E501

        Unix time  # noqa: E501

        :return: The start of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Segment.

        Unix time  # noqa: E501

        :param start: The start of this Segment.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def begin_cut(self):
        """Gets the begin_cut of this Segment.  # noqa: E501

        time cut in ns  # noqa: E501

        :return: The begin_cut of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._begin_cut

    @begin_cut.setter
    def begin_cut(self, begin_cut):
        """Sets the begin_cut of this Segment.

        time cut in ns  # noqa: E501

        :param begin_cut: The begin_cut of this Segment.  # noqa: E501
        :type: int
        """

        self._begin_cut = begin_cut

    @property
    def stop_cut(self):
        """Gets the stop_cut of this Segment.  # noqa: E501

        time cut in ns  # noqa: E501

        :return: The stop_cut of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._stop_cut

    @stop_cut.setter
    def stop_cut(self, stop_cut):
        """Sets the stop_cut of this Segment.

        time cut in ns  # noqa: E501

        :param stop_cut: The stop_cut of this Segment.  # noqa: E501
        :type: int
        """

        self._stop_cut = stop_cut

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Segment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Segment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
