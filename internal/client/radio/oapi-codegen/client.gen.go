// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// oapi-codegen didn't generate
// this type, cast it to a string,
// since it should always be a string.
type N400Error string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdminLibraryMedia request
	GetAdminLibraryMedia(ctx context.Context, params *GetAdminLibraryMediaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminLibraryMediaWithBody request with any body
	PostAdminLibraryMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminLibraryMediaWithBody request with any body
	PutAdminLibraryMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminLibraryMedia(ctx context.Context, body PutAdminLibraryMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminLibraryMediaId request
	DeleteAdminLibraryMediaId(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminLibraryMediaId request
	GetAdminLibraryMediaId(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminLibrarySourceId request
	GetAdminLibrarySourceId(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminLibraryTag request
	GetAdminLibraryTag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminLibraryTagWithBody request with any body
	PostAdminLibraryTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminLibraryTag(ctx context.Context, body PostAdminLibraryTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminLibraryTagTypes request
	GetAdminLibraryTagTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminLibraryTagId request
	DeleteAdminLibraryTagId(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminLoginWithBody request with any body
	PostAdminLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminLogin(ctx context.Context, body PostAdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminSchedule request
	DeleteAdminSchedule(ctx context.Context, params *DeleteAdminScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminSchedule request
	GetAdminSchedule(ctx context.Context, params *GetAdminScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminScheduleWithBody request with any body
	PostAdminScheduleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminSchedule(ctx context.Context, body PostAdminScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminScheduleDjConfig request
	GetAdminScheduleDjConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminScheduleDjConfigWithBody request with any body
	PostAdminScheduleDjConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminScheduleDjConfig(ctx context.Context, body PostAdminScheduleDjConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminScheduleDjStart request
	GetAdminScheduleDjStart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminScheduleDjStop request
	GetAdminScheduleDjStop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminScheduleId request
	DeleteAdminScheduleId(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminScheduleId request
	GetAdminScheduleId(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminTagMultiIdWithBody request with any body
	PostAdminTagMultiIdWithBody(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminTagMultiId(ctx context.Context, id ID, body PostAdminTagMultiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAdminLibraryMedia(ctx context.Context, params *GetAdminLibraryMediaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminLibraryMediaRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminLibraryMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminLibraryMediaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminLibraryMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminLibraryMediaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminLibraryMedia(ctx context.Context, body PutAdminLibraryMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminLibraryMediaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminLibraryMediaId(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminLibraryMediaIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminLibraryMediaId(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminLibraryMediaIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminLibrarySourceId(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminLibrarySourceIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminLibraryTag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminLibraryTagRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminLibraryTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminLibraryTagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminLibraryTag(ctx context.Context, body PostAdminLibraryTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminLibraryTagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminLibraryTagTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminLibraryTagTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminLibraryTagId(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminLibraryTagIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminLogin(ctx context.Context, body PostAdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminSchedule(ctx context.Context, params *DeleteAdminScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminScheduleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminSchedule(ctx context.Context, params *GetAdminScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminScheduleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminScheduleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminScheduleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminSchedule(ctx context.Context, body PostAdminScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminScheduleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminScheduleDjConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminScheduleDjConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminScheduleDjConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminScheduleDjConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminScheduleDjConfig(ctx context.Context, body PostAdminScheduleDjConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminScheduleDjConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminScheduleDjStart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminScheduleDjStartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminScheduleDjStop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminScheduleDjStopRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminScheduleId(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminScheduleIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminScheduleId(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminScheduleIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminTagMultiIdWithBody(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminTagMultiIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminTagMultiId(ctx context.Context, id ID, body PostAdminTagMultiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminTagMultiIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAdminLibraryMediaRequest generates requests for GetAdminLibraryMedia
func NewGetAdminLibraryMediaRequest(server string, params *GetAdminLibraryMediaParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/library/media")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminLibraryMediaRequestWithBody generates requests for PostAdminLibraryMedia with any type of body
func NewPostAdminLibraryMediaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/library/media")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAdminLibraryMediaRequest calls the generic PutAdminLibraryMedia builder with application/json body
func NewPutAdminLibraryMediaRequest(server string, body PutAdminLibraryMediaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminLibraryMediaRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAdminLibraryMediaRequestWithBody generates requests for PutAdminLibraryMedia with any type of body
func NewPutAdminLibraryMediaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/library/media")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminLibraryMediaIdRequest generates requests for DeleteAdminLibraryMediaId
func NewDeleteAdminLibraryMediaIdRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/library/media/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminLibraryMediaIdRequest generates requests for GetAdminLibraryMediaId
func NewGetAdminLibraryMediaIdRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/library/media/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminLibrarySourceIdRequest generates requests for GetAdminLibrarySourceId
func NewGetAdminLibrarySourceIdRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/library/source/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminLibraryTagRequest generates requests for GetAdminLibraryTag
func NewGetAdminLibraryTagRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/library/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminLibraryTagRequest calls the generic PostAdminLibraryTag builder with application/json body
func NewPostAdminLibraryTagRequest(server string, body PostAdminLibraryTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminLibraryTagRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAdminLibraryTagRequestWithBody generates requests for PostAdminLibraryTag with any type of body
func NewPostAdminLibraryTagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/library/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminLibraryTagTypesRequest generates requests for GetAdminLibraryTagTypes
func NewGetAdminLibraryTagTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/library/tag/types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminLibraryTagIdRequest generates requests for DeleteAdminLibraryTagId
func NewDeleteAdminLibraryTagIdRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/library/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminLoginRequest calls the generic PostAdminLogin builder with application/json body
func NewPostAdminLoginRequest(server string, body PostAdminLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAdminLoginRequestWithBody generates requests for PostAdminLogin with any type of body
func NewPostAdminLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminScheduleRequest generates requests for DeleteAdminSchedule
func NewDeleteAdminScheduleRequest(server string, params *DeleteAdminScheduleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/schedule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminScheduleRequest generates requests for GetAdminSchedule
func NewGetAdminScheduleRequest(server string, params *GetAdminScheduleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/schedule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stop != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stop", runtime.ParamLocationQuery, *params.Stop); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminScheduleRequest calls the generic PostAdminSchedule builder with application/json body
func NewPostAdminScheduleRequest(server string, body PostAdminScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminScheduleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAdminScheduleRequestWithBody generates requests for PostAdminSchedule with any type of body
func NewPostAdminScheduleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/schedule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminScheduleDjConfigRequest generates requests for GetAdminScheduleDjConfig
func NewGetAdminScheduleDjConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/schedule/dj/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminScheduleDjConfigRequest calls the generic PostAdminScheduleDjConfig builder with application/json body
func NewPostAdminScheduleDjConfigRequest(server string, body PostAdminScheduleDjConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminScheduleDjConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAdminScheduleDjConfigRequestWithBody generates requests for PostAdminScheduleDjConfig with any type of body
func NewPostAdminScheduleDjConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/schedule/dj/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminScheduleDjStartRequest generates requests for GetAdminScheduleDjStart
func NewGetAdminScheduleDjStartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/schedule/dj/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminScheduleDjStopRequest generates requests for GetAdminScheduleDjStop
func NewGetAdminScheduleDjStopRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/schedule/dj/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminScheduleIdRequest generates requests for DeleteAdminScheduleId
func NewDeleteAdminScheduleIdRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/schedule/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminScheduleIdRequest generates requests for GetAdminScheduleId
func NewGetAdminScheduleIdRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/schedule/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminTagMultiIdRequest calls the generic PostAdminTagMultiId builder with application/json body
func NewPostAdminTagMultiIdRequest(server string, id ID, body PostAdminTagMultiIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminTagMultiIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostAdminTagMultiIdRequestWithBody generates requests for PostAdminTagMultiId with any type of body
func NewPostAdminTagMultiIdRequestWithBody(server string, id ID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tag/multi/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdminLibraryMediaWithResponse request
	GetAdminLibraryMediaWithResponse(ctx context.Context, params *GetAdminLibraryMediaParams, reqEditors ...RequestEditorFn) (*GetAdminLibraryMediaResponse, error)

	// PostAdminLibraryMediaWithBodyWithResponse request with any body
	PostAdminLibraryMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminLibraryMediaResponse, error)

	// PutAdminLibraryMediaWithBodyWithResponse request with any body
	PutAdminLibraryMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminLibraryMediaResponse, error)

	PutAdminLibraryMediaWithResponse(ctx context.Context, body PutAdminLibraryMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminLibraryMediaResponse, error)

	// DeleteAdminLibraryMediaIdWithResponse request
	DeleteAdminLibraryMediaIdWithResponse(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*DeleteAdminLibraryMediaIdResponse, error)

	// GetAdminLibraryMediaIdWithResponse request
	GetAdminLibraryMediaIdWithResponse(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*GetAdminLibraryMediaIdResponse, error)

	// GetAdminLibrarySourceIdWithResponse request
	GetAdminLibrarySourceIdWithResponse(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*GetAdminLibrarySourceIdResponse, error)

	// GetAdminLibraryTagWithResponse request
	GetAdminLibraryTagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminLibraryTagResponse, error)

	// PostAdminLibraryTagWithBodyWithResponse request with any body
	PostAdminLibraryTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminLibraryTagResponse, error)

	PostAdminLibraryTagWithResponse(ctx context.Context, body PostAdminLibraryTagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminLibraryTagResponse, error)

	// GetAdminLibraryTagTypesWithResponse request
	GetAdminLibraryTagTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminLibraryTagTypesResponse, error)

	// DeleteAdminLibraryTagIdWithResponse request
	DeleteAdminLibraryTagIdWithResponse(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*DeleteAdminLibraryTagIdResponse, error)

	// PostAdminLoginWithBodyWithResponse request with any body
	PostAdminLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminLoginResponse, error)

	PostAdminLoginWithResponse(ctx context.Context, body PostAdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminLoginResponse, error)

	// DeleteAdminScheduleWithResponse request
	DeleteAdminScheduleWithResponse(ctx context.Context, params *DeleteAdminScheduleParams, reqEditors ...RequestEditorFn) (*DeleteAdminScheduleResponse, error)

	// GetAdminScheduleWithResponse request
	GetAdminScheduleWithResponse(ctx context.Context, params *GetAdminScheduleParams, reqEditors ...RequestEditorFn) (*GetAdminScheduleResponse, error)

	// PostAdminScheduleWithBodyWithResponse request with any body
	PostAdminScheduleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminScheduleResponse, error)

	PostAdminScheduleWithResponse(ctx context.Context, body PostAdminScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminScheduleResponse, error)

	// GetAdminScheduleDjConfigWithResponse request
	GetAdminScheduleDjConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminScheduleDjConfigResponse, error)

	// PostAdminScheduleDjConfigWithBodyWithResponse request with any body
	PostAdminScheduleDjConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminScheduleDjConfigResponse, error)

	PostAdminScheduleDjConfigWithResponse(ctx context.Context, body PostAdminScheduleDjConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminScheduleDjConfigResponse, error)

	// GetAdminScheduleDjStartWithResponse request
	GetAdminScheduleDjStartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminScheduleDjStartResponse, error)

	// GetAdminScheduleDjStopWithResponse request
	GetAdminScheduleDjStopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminScheduleDjStopResponse, error)

	// DeleteAdminScheduleIdWithResponse request
	DeleteAdminScheduleIdWithResponse(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*DeleteAdminScheduleIdResponse, error)

	// GetAdminScheduleIdWithResponse request
	GetAdminScheduleIdWithResponse(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*GetAdminScheduleIdResponse, error)

	// PostAdminTagMultiIdWithBodyWithResponse request with any body
	PostAdminTagMultiIdWithBodyWithResponse(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminTagMultiIdResponse, error)

	PostAdminTagMultiIdWithResponse(ctx context.Context, id ID, body PostAdminTagMultiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminTagMultiIdResponse, error)
}

type GetAdminLibraryMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MediaArray
	JSON400      *struct {
		Error *N400Error `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAdminLibraryMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminLibraryMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminLibraryMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminLibraryMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminLibraryMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminLibraryMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminLibraryMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminLibraryMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminLibraryMediaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Error *N400Error `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteAdminLibraryMediaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminLibraryMediaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminLibraryMediaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Media
	JSON400      *struct {
		Error *N400Error `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAdminLibraryMediaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminLibraryMediaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminLibrarySourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Error *N400Error `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAdminLibrarySourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminLibrarySourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminLibraryTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagList
}

// Status returns HTTPResponse.Status
func (r GetAdminLibraryTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminLibraryTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminLibraryTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id *int `json:"id,omitempty"`
	}
	JSON400 *struct {
		Error *N400Error `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAdminLibraryTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminLibraryTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminLibraryTagTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagTypes
}

// Status returns HTTPResponse.Status
func (r GetAdminLibraryTagTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminLibraryTagTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminLibraryTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Error *N400Error `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteAdminLibraryTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminLibraryTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Token *string `json:"token,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAdminLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Segments
	JSON400      *struct {
		Error *N400Error `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAdminScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id *int `json:"id,omitempty"`
	}
	JSON400 *struct {
		Error *N400Error `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAdminScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminScheduleDjConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutoDJConfig
}

// Status returns HTTPResponse.Status
func (r GetAdminScheduleDjConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminScheduleDjConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminScheduleDjConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminScheduleDjConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminScheduleDjConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminScheduleDjStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdminScheduleDjStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminScheduleDjStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminScheduleDjStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdminScheduleDjStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminScheduleDjStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminScheduleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Error *N400Error `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteAdminScheduleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminScheduleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminScheduleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Segment
	JSON400      *struct {
		Error *N400Error `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAdminScheduleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminScheduleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminTagMultiIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminTagMultiIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminTagMultiIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdminLibraryMediaWithResponse request returning *GetAdminLibraryMediaResponse
func (c *ClientWithResponses) GetAdminLibraryMediaWithResponse(ctx context.Context, params *GetAdminLibraryMediaParams, reqEditors ...RequestEditorFn) (*GetAdminLibraryMediaResponse, error) {
	rsp, err := c.GetAdminLibraryMedia(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminLibraryMediaResponse(rsp)
}

// PostAdminLibraryMediaWithBodyWithResponse request with arbitrary body returning *PostAdminLibraryMediaResponse
func (c *ClientWithResponses) PostAdminLibraryMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminLibraryMediaResponse, error) {
	rsp, err := c.PostAdminLibraryMediaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminLibraryMediaResponse(rsp)
}

// PutAdminLibraryMediaWithBodyWithResponse request with arbitrary body returning *PutAdminLibraryMediaResponse
func (c *ClientWithResponses) PutAdminLibraryMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminLibraryMediaResponse, error) {
	rsp, err := c.PutAdminLibraryMediaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminLibraryMediaResponse(rsp)
}

func (c *ClientWithResponses) PutAdminLibraryMediaWithResponse(ctx context.Context, body PutAdminLibraryMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminLibraryMediaResponse, error) {
	rsp, err := c.PutAdminLibraryMedia(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminLibraryMediaResponse(rsp)
}

// DeleteAdminLibraryMediaIdWithResponse request returning *DeleteAdminLibraryMediaIdResponse
func (c *ClientWithResponses) DeleteAdminLibraryMediaIdWithResponse(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*DeleteAdminLibraryMediaIdResponse, error) {
	rsp, err := c.DeleteAdminLibraryMediaId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminLibraryMediaIdResponse(rsp)
}

// GetAdminLibraryMediaIdWithResponse request returning *GetAdminLibraryMediaIdResponse
func (c *ClientWithResponses) GetAdminLibraryMediaIdWithResponse(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*GetAdminLibraryMediaIdResponse, error) {
	rsp, err := c.GetAdminLibraryMediaId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminLibraryMediaIdResponse(rsp)
}

// GetAdminLibrarySourceIdWithResponse request returning *GetAdminLibrarySourceIdResponse
func (c *ClientWithResponses) GetAdminLibrarySourceIdWithResponse(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*GetAdminLibrarySourceIdResponse, error) {
	rsp, err := c.GetAdminLibrarySourceId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminLibrarySourceIdResponse(rsp)
}

// GetAdminLibraryTagWithResponse request returning *GetAdminLibraryTagResponse
func (c *ClientWithResponses) GetAdminLibraryTagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminLibraryTagResponse, error) {
	rsp, err := c.GetAdminLibraryTag(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminLibraryTagResponse(rsp)
}

// PostAdminLibraryTagWithBodyWithResponse request with arbitrary body returning *PostAdminLibraryTagResponse
func (c *ClientWithResponses) PostAdminLibraryTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminLibraryTagResponse, error) {
	rsp, err := c.PostAdminLibraryTagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminLibraryTagResponse(rsp)
}

func (c *ClientWithResponses) PostAdminLibraryTagWithResponse(ctx context.Context, body PostAdminLibraryTagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminLibraryTagResponse, error) {
	rsp, err := c.PostAdminLibraryTag(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminLibraryTagResponse(rsp)
}

// GetAdminLibraryTagTypesWithResponse request returning *GetAdminLibraryTagTypesResponse
func (c *ClientWithResponses) GetAdminLibraryTagTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminLibraryTagTypesResponse, error) {
	rsp, err := c.GetAdminLibraryTagTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminLibraryTagTypesResponse(rsp)
}

// DeleteAdminLibraryTagIdWithResponse request returning *DeleteAdminLibraryTagIdResponse
func (c *ClientWithResponses) DeleteAdminLibraryTagIdWithResponse(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*DeleteAdminLibraryTagIdResponse, error) {
	rsp, err := c.DeleteAdminLibraryTagId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminLibraryTagIdResponse(rsp)
}

// PostAdminLoginWithBodyWithResponse request with arbitrary body returning *PostAdminLoginResponse
func (c *ClientWithResponses) PostAdminLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminLoginResponse, error) {
	rsp, err := c.PostAdminLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminLoginResponse(rsp)
}

func (c *ClientWithResponses) PostAdminLoginWithResponse(ctx context.Context, body PostAdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminLoginResponse, error) {
	rsp, err := c.PostAdminLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminLoginResponse(rsp)
}

// DeleteAdminScheduleWithResponse request returning *DeleteAdminScheduleResponse
func (c *ClientWithResponses) DeleteAdminScheduleWithResponse(ctx context.Context, params *DeleteAdminScheduleParams, reqEditors ...RequestEditorFn) (*DeleteAdminScheduleResponse, error) {
	rsp, err := c.DeleteAdminSchedule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminScheduleResponse(rsp)
}

// GetAdminScheduleWithResponse request returning *GetAdminScheduleResponse
func (c *ClientWithResponses) GetAdminScheduleWithResponse(ctx context.Context, params *GetAdminScheduleParams, reqEditors ...RequestEditorFn) (*GetAdminScheduleResponse, error) {
	rsp, err := c.GetAdminSchedule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminScheduleResponse(rsp)
}

// PostAdminScheduleWithBodyWithResponse request with arbitrary body returning *PostAdminScheduleResponse
func (c *ClientWithResponses) PostAdminScheduleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminScheduleResponse, error) {
	rsp, err := c.PostAdminScheduleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminScheduleResponse(rsp)
}

func (c *ClientWithResponses) PostAdminScheduleWithResponse(ctx context.Context, body PostAdminScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminScheduleResponse, error) {
	rsp, err := c.PostAdminSchedule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminScheduleResponse(rsp)
}

// GetAdminScheduleDjConfigWithResponse request returning *GetAdminScheduleDjConfigResponse
func (c *ClientWithResponses) GetAdminScheduleDjConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminScheduleDjConfigResponse, error) {
	rsp, err := c.GetAdminScheduleDjConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminScheduleDjConfigResponse(rsp)
}

// PostAdminScheduleDjConfigWithBodyWithResponse request with arbitrary body returning *PostAdminScheduleDjConfigResponse
func (c *ClientWithResponses) PostAdminScheduleDjConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminScheduleDjConfigResponse, error) {
	rsp, err := c.PostAdminScheduleDjConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminScheduleDjConfigResponse(rsp)
}

func (c *ClientWithResponses) PostAdminScheduleDjConfigWithResponse(ctx context.Context, body PostAdminScheduleDjConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminScheduleDjConfigResponse, error) {
	rsp, err := c.PostAdminScheduleDjConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminScheduleDjConfigResponse(rsp)
}

// GetAdminScheduleDjStartWithResponse request returning *GetAdminScheduleDjStartResponse
func (c *ClientWithResponses) GetAdminScheduleDjStartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminScheduleDjStartResponse, error) {
	rsp, err := c.GetAdminScheduleDjStart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminScheduleDjStartResponse(rsp)
}

// GetAdminScheduleDjStopWithResponse request returning *GetAdminScheduleDjStopResponse
func (c *ClientWithResponses) GetAdminScheduleDjStopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminScheduleDjStopResponse, error) {
	rsp, err := c.GetAdminScheduleDjStop(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminScheduleDjStopResponse(rsp)
}

// DeleteAdminScheduleIdWithResponse request returning *DeleteAdminScheduleIdResponse
func (c *ClientWithResponses) DeleteAdminScheduleIdWithResponse(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*DeleteAdminScheduleIdResponse, error) {
	rsp, err := c.DeleteAdminScheduleId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminScheduleIdResponse(rsp)
}

// GetAdminScheduleIdWithResponse request returning *GetAdminScheduleIdResponse
func (c *ClientWithResponses) GetAdminScheduleIdWithResponse(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*GetAdminScheduleIdResponse, error) {
	rsp, err := c.GetAdminScheduleId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminScheduleIdResponse(rsp)
}

// PostAdminTagMultiIdWithBodyWithResponse request with arbitrary body returning *PostAdminTagMultiIdResponse
func (c *ClientWithResponses) PostAdminTagMultiIdWithBodyWithResponse(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminTagMultiIdResponse, error) {
	rsp, err := c.PostAdminTagMultiIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminTagMultiIdResponse(rsp)
}

func (c *ClientWithResponses) PostAdminTagMultiIdWithResponse(ctx context.Context, id ID, body PostAdminTagMultiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminTagMultiIdResponse, error) {
	rsp, err := c.PostAdminTagMultiId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminTagMultiIdResponse(rsp)
}

// ParseGetAdminLibraryMediaResponse parses an HTTP response from a GetAdminLibraryMediaWithResponse call
func ParseGetAdminLibraryMediaResponse(rsp *http.Response) (*GetAdminLibraryMediaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminLibraryMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MediaArray
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *N400Error `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostAdminLibraryMediaResponse parses an HTTP response from a PostAdminLibraryMediaWithResponse call
func ParsePostAdminLibraryMediaResponse(rsp *http.Response) (*PostAdminLibraryMediaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminLibraryMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminLibraryMediaResponse parses an HTTP response from a PutAdminLibraryMediaWithResponse call
func ParsePutAdminLibraryMediaResponse(rsp *http.Response) (*PutAdminLibraryMediaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminLibraryMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminLibraryMediaIdResponse parses an HTTP response from a DeleteAdminLibraryMediaIdWithResponse call
func ParseDeleteAdminLibraryMediaIdResponse(rsp *http.Response) (*DeleteAdminLibraryMediaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminLibraryMediaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *N400Error `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAdminLibraryMediaIdResponse parses an HTTP response from a GetAdminLibraryMediaIdWithResponse call
func ParseGetAdminLibraryMediaIdResponse(rsp *http.Response) (*GetAdminLibraryMediaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminLibraryMediaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Media
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *N400Error `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAdminLibrarySourceIdResponse parses an HTTP response from a GetAdminLibrarySourceIdWithResponse call
func ParseGetAdminLibrarySourceIdResponse(rsp *http.Response) (*GetAdminLibrarySourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminLibrarySourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *N400Error `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAdminLibraryTagResponse parses an HTTP response from a GetAdminLibraryTagWithResponse call
func ParseGetAdminLibraryTagResponse(rsp *http.Response) (*GetAdminLibraryTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminLibraryTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminLibraryTagResponse parses an HTTP response from a PostAdminLibraryTagWithResponse call
func ParsePostAdminLibraryTagResponse(rsp *http.Response) (*PostAdminLibraryTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminLibraryTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id *int `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *N400Error `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAdminLibraryTagTypesResponse parses an HTTP response from a GetAdminLibraryTagTypesWithResponse call
func ParseGetAdminLibraryTagTypesResponse(rsp *http.Response) (*GetAdminLibraryTagTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminLibraryTagTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagTypes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminLibraryTagIdResponse parses an HTTP response from a DeleteAdminLibraryTagIdWithResponse call
func ParseDeleteAdminLibraryTagIdResponse(rsp *http.Response) (*DeleteAdminLibraryTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminLibraryTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *N400Error `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostAdminLoginResponse parses an HTTP response from a PostAdminLoginWithResponse call
func ParsePostAdminLoginResponse(rsp *http.Response) (*PostAdminLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminScheduleResponse parses an HTTP response from a DeleteAdminScheduleWithResponse call
func ParseDeleteAdminScheduleResponse(rsp *http.Response) (*DeleteAdminScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminScheduleResponse parses an HTTP response from a GetAdminScheduleWithResponse call
func ParseGetAdminScheduleResponse(rsp *http.Response) (*GetAdminScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Segments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *N400Error `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostAdminScheduleResponse parses an HTTP response from a PostAdminScheduleWithResponse call
func ParsePostAdminScheduleResponse(rsp *http.Response) (*PostAdminScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id *int `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *N400Error `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAdminScheduleDjConfigResponse parses an HTTP response from a GetAdminScheduleDjConfigWithResponse call
func ParseGetAdminScheduleDjConfigResponse(rsp *http.Response) (*GetAdminScheduleDjConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminScheduleDjConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutoDJConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminScheduleDjConfigResponse parses an HTTP response from a PostAdminScheduleDjConfigWithResponse call
func ParsePostAdminScheduleDjConfigResponse(rsp *http.Response) (*PostAdminScheduleDjConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminScheduleDjConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminScheduleDjStartResponse parses an HTTP response from a GetAdminScheduleDjStartWithResponse call
func ParseGetAdminScheduleDjStartResponse(rsp *http.Response) (*GetAdminScheduleDjStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminScheduleDjStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminScheduleDjStopResponse parses an HTTP response from a GetAdminScheduleDjStopWithResponse call
func ParseGetAdminScheduleDjStopResponse(rsp *http.Response) (*GetAdminScheduleDjStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminScheduleDjStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminScheduleIdResponse parses an HTTP response from a DeleteAdminScheduleIdWithResponse call
func ParseDeleteAdminScheduleIdResponse(rsp *http.Response) (*DeleteAdminScheduleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminScheduleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *N400Error `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAdminScheduleIdResponse parses an HTTP response from a GetAdminScheduleIdWithResponse call
func ParseGetAdminScheduleIdResponse(rsp *http.Response) (*GetAdminScheduleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminScheduleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Segment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *N400Error `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostAdminTagMultiIdResponse parses an HTTP response from a PostAdminTagMultiIdWithResponse call
func ParsePostAdminTagMultiIdResponse(rsp *http.Response) (*PostAdminTagMultiIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminTagMultiIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
